<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Spencer Sharp</title>
        <link>https://daniel-butler.com</link>
        <description>Your blog description</description>
        <lastBuildDate>Sat, 06 May 2023 00:47:25 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <image>
            <title>Spencer Sharp</title>
            <url>https://daniel-butler.com/favicon.ico</url>
            <link>https://daniel-butler.com</link>
        </image>
        <copyright>All rights reserved 2023</copyright>
        <item>
            <title><![CDATA[Rust Book Dynamic Traits Example]]></title>
            <link>https://daniel-butler.com/articles/rust-dyn-traits-example</link>
            <guid>https://daniel-butler.com/articles/rust-dyn-traits-example</guid>
            <pubDate>Fri, 05 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Expanding on the example in Rust Book's chapter 17 section 3. Refactored with ChatGPT 4s help.]]></description>
            <content:encoded><![CDATA[<h2>Overview</h2>
<p>The example comes from the prompt below in the <a href="https://doc.rust-lang.org/book/ch17-03-oo-design-patterns.html">rust book&#x27;s chapter 17 section 3</a>.</p>
<blockquote>
<p>To see the simplicity of maintaining code that uses the state pattern, try a few of these suggestions:</p>
<ul>
<li>Add a <code>reject</code> method that changes the post’s state from <code>PendingReview</code> back to <code>Draft</code>.</li>
<li>Require two calls to <code>approve</code> before the state can be changed to <code>Published</code>.</li>
<li>Allow users to add text content only when a post is in the <code>Draft</code> state. Hint: have the state object responsible for what might change about the content but not responsible for modifying the <code>Post</code>.</li>
</ul>
</blockquote>
<h3>Result</h3>
<p>Below is the code I wrote to solve the three challenges above. I struggled with getting the value for the <code>Optional&lt;Box&lt;...&gt;&gt;</code>. I&#x27;m starting to grasp that it all goes back to the types when working with rust. Types are not as big of a deal in Python, so that is taking some getting used to.</p>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">blog<span class="token punctuation">::</span></span><span class="token class-name">Post</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> post <span class="token operator">=</span> <span class="token class-name">Post</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    post<span class="token punctuation">.</span><span class="token function">add_text</span><span class="token punctuation">(</span><span class="token string">&quot;I ate a salad for lunch today&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> post<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    post<span class="token punctuation">.</span><span class="token function">request_review</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> post<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	post<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> post<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	post<span class="token punctuation">.</span><span class="token function">request_review</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> post<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	post<span class="token punctuation">.</span><span class="token function">approve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	post<span class="token punctuation">.</span><span class="token function">approve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token string">&quot;I ate a salad for lunch today&quot;</span><span class="token punctuation">,</span> post<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">mod</span> <span class="token module-declaration namespace">blog</span> <span class="token punctuation">{</span>
	<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Post</span> <span class="token punctuation">{</span>
		state<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">State</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
		content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">impl</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span>
		<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span>
			<span class="token class-name">Post</span> <span class="token punctuation">{</span>
				state<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Draft</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		
		<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_text</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Can add content: {}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">can_add_content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			
				<span class="token keyword">if</span> s<span class="token punctuation">.</span><span class="token function">can_add_content</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">self</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		
		<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">content</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;content: {}&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>
			content
		<span class="token punctuation">}</span>
		
		<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">request_review</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">request_review</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		
		<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">approve</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">approve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		
		<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">reject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">trait</span> <span class="token type-definition class-name">State</span> <span class="token punctuation">{</span>
		<span class="token keyword">fn</span> <span class="token function-definition function">request_review</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">State</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
		<span class="token keyword">fn</span> <span class="token function-definition function">approve</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">State</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
		<span class="token keyword">fn</span> <span class="token function-definition function">reject</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">State</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
		<span class="token keyword">fn</span> <span class="token function-definition function">content</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#x27;a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> _post<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#x27;a</span> <span class="token class-name">Post</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#x27;a</span> <span class="token keyword">str</span> <span class="token punctuation">{</span>
		 	<span class="token string">&quot;&quot;</span>
		 <span class="token punctuation">}</span>
		<span class="token keyword">fn</span> <span class="token function-definition function">can_add_content</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>
			<span class="token boolean">false</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">struct</span> <span class="token type-definition class-name">Draft</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	
	<span class="token keyword">impl</span> <span class="token class-name">State</span> <span class="token keyword">for</span> <span class="token class-name">Draft</span> <span class="token punctuation">{</span>
		<span class="token keyword">fn</span> <span class="token function-definition function">request_review</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">State</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
			<span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">PendingReview</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		
		<span class="token keyword">fn</span> <span class="token function-definition function">approve</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">State</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
		 	<span class="token keyword">self</span>
		<span class="token punctuation">}</span>
		 
		<span class="token keyword">fn</span> <span class="token function-definition function">reject</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">State</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
		 	<span class="token keyword">self</span>
		<span class="token punctuation">}</span>
		 
		<span class="token keyword">fn</span> <span class="token function-definition function">can_add_content</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>
			<span class="token boolean">true</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">struct</span> <span class="token type-definition class-name">PendingReview</span> <span class="token punctuation">{</span>
		reviews<span class="token punctuation">:</span> <span class="token keyword">i8</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">impl</span> <span class="token class-name">PendingReview</span> <span class="token punctuation">{</span>
		<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">PendingReview</span> <span class="token punctuation">{</span>
			<span class="token class-name">PendingReview</span> <span class="token punctuation">{</span> reviews<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		
		<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_review</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">self</span><span class="token punctuation">.</span>reviews <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		
		<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_reviews</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i8</span> <span class="token punctuation">{</span>
			<span class="token keyword">self</span><span class="token punctuation">.</span>reviews
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">impl</span> <span class="token class-name">State</span> <span class="token keyword">for</span> <span class="token class-name">PendingReview</span> <span class="token punctuation">{</span>
		<span class="token keyword">fn</span> <span class="token function-definition function">request_review</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">State</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">self</span>
		<span class="token punctuation">}</span>
		
		<span class="token keyword">fn</span> <span class="token function-definition function">approve</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">State</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> <span class="token keyword">mut</span> state <span class="token operator">=</span> <span class="token class-name">PendingReview</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			state<span class="token punctuation">.</span><span class="token function">add_review</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
			<span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get_reviews</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				<span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Published</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		
		<span class="token keyword">fn</span> <span class="token function-definition function">reject</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">State</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
		 	<span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Draft</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
		 <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">struct</span> <span class="token type-definition class-name">Published</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	
	<span class="token keyword">impl</span> <span class="token class-name">State</span> <span class="token keyword">for</span> <span class="token class-name">Published</span> <span class="token punctuation">{</span>
		<span class="token keyword">fn</span> <span class="token function-definition function">request_review</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">State</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">self</span>
		<span class="token punctuation">}</span>
		
		<span class="token keyword">fn</span> <span class="token function-definition function">approve</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">State</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
		 	<span class="token keyword">self</span>
		 <span class="token punctuation">}</span>
		 
		<span class="token keyword">fn</span> <span class="token function-definition function">reject</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">State</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
		 	<span class="token keyword">self</span>
		 <span class="token punctuation">}</span>
		 
		<span class="token keyword">fn</span> <span class="token function-definition function">content</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#x27;a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> post<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#x27;a</span> <span class="token class-name">Post</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#x27;a</span> <span class="token keyword">str</span> <span class="token punctuation">{</span>
			<span class="token operator">&amp;</span>post<span class="token punctuation">.</span>content
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>Refinement</h2>
<p>Now, what can be learned from asking ChatGPT?</p>
<p>Open AI&#x27;s ChatGPT prompt.</p>
<pre><code>Refactor this code to be more performant.
</code></pre>
<h3>Response</h3>
<p>One possible way to make the code more performant is to avoid unnecessary allocations and cloning of data. One such example is in the <code>content()</code> method of the <code>State</code> trait, where the content is cloned unnecessarily.</p>
<ol>
<li>Instead, we can use a reference to the existing content to avoid the clone:</li>
</ol>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">content</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#x27;a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> post<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#x27;a</span> <span class="token class-name">Post</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#x27;a</span> <span class="token keyword">str</span> <span class="token punctuation">{</span>
    <span class="token operator">&amp;</span>post<span class="token punctuation">.</span>content
<span class="token punctuation">}</span>
</code></pre>
<ol start="2">
<li>Similarly, in the <code>add_text()</code> method of the <code>Post</code> struct, we can use a reference to the text to avoid the allocation and copying of the string:</li>
</ol>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_text</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> s<span class="token punctuation">.</span><span class="token function">can_add_content</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">self</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<ol start="3">
<li>We can also avoid unnecessary boxing and dynamic dispatch by using an enum instead of a trait object for the state of the post. This can simplify the code and make it more efficient:</li>
</ol>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">mod</span> <span class="token module-declaration namespace">blog</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Post</span> <span class="token punctuation">{</span>
        state<span class="token punctuation">:</span> <span class="token class-name">State</span><span class="token punctuation">,</span>
        content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>

    <span class="token attribute attr-name">#[derive(Debug)]</span>
    <span class="token keyword">enum</span> <span class="token type-definition class-name">State</span> <span class="token punctuation">{</span>
        <span class="token class-name">Draft</span> <span class="token punctuation">{</span> can_add_content<span class="token punctuation">:</span> <span class="token keyword">bool</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token class-name">PendingReview</span> <span class="token punctuation">{</span> reviews<span class="token punctuation">:</span> <span class="token keyword">i8</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token class-name">Published</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">impl</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span>
        <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span>
            <span class="token class-name">Post</span> <span class="token punctuation">{</span>
                state<span class="token punctuation">:</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Draft</span> <span class="token punctuation">{</span> can_add_content<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_text</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Draft</span> <span class="token punctuation">{</span> can_add_content<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token punctuation">{</span>
                <span class="token keyword">self</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">content</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Published</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token punctuation">{</span>
                <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>content
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">request_review</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Draft</span> <span class="token punctuation">{</span> <span class="token punctuation">..</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token punctuation">{</span>
                <span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">PendingReview</span> <span class="token punctuation">{</span> reviews<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">approve</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">PendingReview</span> <span class="token punctuation">{</span> reviews <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token punctuation">{</span>
                <span class="token operator">*</span>reviews <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token operator">*</span>reviews <span class="token operator">&gt;=</span> <span class="token number">2</span> <span class="token punctuation">{</span>
                    <span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Published</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">reject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">PendingReview</span> <span class="token punctuation">{</span> <span class="token punctuation">..</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token punctuation">{</span>
                <span class="token keyword">self</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token class-name">Draft</span> <span class="token punctuation">{</span> can_add_content<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>With these changes, the code should be more efficient and performant.</p>
<h2>Summary</h2>
<p>For the first two points, as best I can tell, it is already happening. And the last point is fair and even called out in the rusty book. We used <code>Box</code>s to show how they work with <code>dyn trait</code>s. Overall because I didn&#x27;t come up with a majority of the code it didn&#x27;t leave a lot of room for ChatGPT to fix it.</p>]]></content:encoded>
            <author>spencer@planetaria.tech (Spencer Sharp)</author>
        </item>
        <item>
            <title><![CDATA[Good Reads]]></title>
            <link>https://daniel-butler.com/articles/reading-list</link>
            <guid>https://daniel-butler.com/articles/reading-list</guid>
            <pubDate>Fri, 17 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Collection of articles]]></description>
            <content:encoded><![CDATA[<h1>Overview</h1>
<p>List of articles I&#x27;ve found helpful, insightful, and want to remember.</p>
<h2>List</h2>
<ul>
<li><a href="https://www.scattered-thoughts.net/writing/reflections-on-a-decade-of-coding">https://www.scattered-thoughts.net/writing/reflections-on-a-decade-of-coding</a></li>
<li><a href="https://skamille.medium.com/an-incomplete-list-of-skills-senior-engineers-need-beyond-coding-8ed4a521b29f">https://skamille.medium.com/an-incomplete-list-of-skills-senior-engineers-need-beyond-coding-8ed4a521b29f</a></li>
</ul>]]></content:encoded>
            <author>spencer@planetaria.tech (Spencer Sharp)</author>
        </item>
        <item>
            <title><![CDATA[Rust HR Example Question]]></title>
            <link>https://daniel-butler.com/articles/hr-application</link>
            <guid>https://daniel-butler.com/articles/hr-application</guid>
            <pubDate>Wed, 08 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Rust Book example and solution to the HR application exercise.]]></description>
            <content:encoded><![CDATA[<h1>Overview</h1>
<p>This is <a href="https://doc.rust-lang.org/stable/book/ch08-03-hash-maps.html#summary">the third example problem</a> from the rust book. As before there will be a python example then the Rust example.</p>
<h2>Problem Statement</h2>
<p>Using a hash map and vectors, create a text interface to allow a user to add employee names to a department in a company. For example, “Add Sally to Engineering” or “Add Amir to Sales.” Then let the user retrieve a list of all people in a department or all people in the company by department, sorted alphabetically.</p>
<h3>Input</h3>
<pre><code>Add Sally to Engineering
Add Amir to Sales
Add Juan to Accounting
Add George to HR
Add Eric to Sales
Add Sam to Engineering
Add Cole to Engineering
List Employees
List Sales
List Engineering
List HR
</code></pre>
<h2>Python</h2>
<p>This uses a simple while loop and stores the data in a dictionary by department which is flattened with a simple list comprehension.</p>
<pre class="language-python"><code class="language-python">employees <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
repeat <span class="token operator">=</span> <span class="token boolean">True</span>


<span class="token keyword">def</span> <span class="token function">company</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span>
	command_words <span class="token operator">=</span> command<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
	cmd <span class="token operator">=</span> command_words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> cmd <span class="token operator">==</span> <span class="token string">&quot;add&quot;</span><span class="token punctuation">:</span>
		name <span class="token operator">=</span> command_words<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
		department <span class="token operator">=</span> command_words<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
		emp_department <span class="token operator">=</span> employees<span class="token punctuation">.</span>get<span class="token punctuation">(</span>department<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		emp_department<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
		employees<span class="token punctuation">[</span>department<span class="token punctuation">]</span> <span class="token operator">=</span> emp_department
		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Added </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token punctuation">{</span>department<span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span>
	<span class="token keyword">elif</span> cmd <span class="token operator">==</span> <span class="token string">&quot;list&quot;</span><span class="token punctuation">:</span>
		list_type <span class="token operator">=</span> command_words<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> list_type <span class="token operator">==</span> <span class="token string">&quot;employees&quot;</span><span class="token punctuation">:</span>
			emps <span class="token operator">=</span> <span class="token punctuation">[</span>
				emp
				<span class="token keyword">for</span> emps_dep <span class="token keyword">in</span> employees<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token keyword">for</span> emp <span class="token keyword">in</span> emps_dep
			<span class="token punctuation">]</span>
			emps<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Employees: </span><span class="token interpolation"><span class="token punctuation">{</span>emps<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
		<span class="token keyword">else</span><span class="token punctuation">:</span>
			emps <span class="token operator">=</span> employees<span class="token punctuation">.</span>get<span class="token punctuation">(</span>list_type<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
			emps<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Employees in Department </span><span class="token interpolation"><span class="token punctuation">{</span>list_type<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>emps<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
	<span class="token keyword">elif</span> cmd <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">&quot;exit&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;quit&quot;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Exiting...&quot;</span></span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token boolean">False</span>
	
	<span class="token keyword">return</span> <span class="token boolean">True</span>


<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Welcome: to the employee directory! when you are done type exit.\n============================\n&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">while</span> repeat<span class="token punctuation">:</span>
	command <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	repeat <span class="token operator">=</span> company<span class="token punctuation">(</span>command<span class="token punctuation">)</span>
	
</code></pre>
<p>Output</p>
<pre><code>Welcome: to the employee directory! when you are done type exit.
============================

Add Sally to Engineering
Added Sally to engineering!
Add Amir to Sales
Added Amir to sales!
Add Juan to Accounting
Added Juan to accounting!
Add George to HR
Added George to hr!
Add Eric to Sales
Added Eric to sales!
Add Sam to Engineering
Added Sam to engineering!
Add Cole to Engineering
Added Cole to engineering!
list employees 
Employees: [&#x27;Amir&#x27;, &#x27;Cole&#x27;, &#x27;Eric&#x27;, &#x27;George&#x27;, &#x27;Juan&#x27;, &#x27;Sally&#x27;, &#x27;Sam&#x27;]
list sales
Employees in Department sales: [&#x27;Amir&#x27;, &#x27;Eric&#x27;]
list engineering
Employees in Department engineering: [&#x27;Cole&#x27;, &#x27;Sally&#x27;, &#x27;Sam&#x27;]
list hr 
Employees in Department hr: [&#x27;George&#x27;]
exit
Exiting...
</code></pre>
<h2>Rust</h2>
<p>This is my original rust solution. The solution takes advantage of the lessons learned from the median and mode refactoring by using entries when modifying <code>HashMap</code>s. When running into issues about typing being off or the size not being known at compile time, the errors made more sense. The stack vs. the heap is an integral concept that is never touched on in python.</p>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> <span class="token keyword">mut</span> employees_real<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> <span class="token keyword">mut</span> repeat <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	
	<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Welcome: to the employee directory! when you are done type exit.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;============================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">while</span> repeat <span class="token punctuation">{</span>
		<span class="token keyword">let</span> <span class="token keyword">mut</span> input <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> input<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid input!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> input <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Input: {}&quot;</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>
		repeat <span class="token operator">=</span> <span class="token function">record_employee</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> employees_real<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">record_employee</span><span class="token punctuation">(</span>command<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">,</span> employees<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> command_words<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">split_whitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span>from<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> cmd <span class="token operator">=</span> command_words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_lowercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">if</span> cmd <span class="token operator">==</span> <span class="token string">&quot;add&quot;</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> name <span class="token operator">=</span> command_words<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> dep <span class="token operator">=</span> command_words<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_lowercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Added {} to {}&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
		employees<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or_insert_with</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token punctuation">::</span>new<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> cmd <span class="token operator">==</span> <span class="token string">&quot;list&quot;</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> list_type <span class="token operator">=</span> command_words<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">to_lowercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token keyword">if</span> list_type <span class="token operator">==</span> <span class="token string">&quot;employees&quot;</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> <span class="token keyword">mut</span> emps <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span>_dept<span class="token punctuation">,</span> dept_emps<span class="token punctuation">)</span> <span class="token keyword">in</span> employees<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">for</span> emp <span class="token keyword">in</span> dept_emps<span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					emps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
			emps<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Employees: {:?}&quot;</span><span class="token punctuation">,</span> emps<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> nut emps <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list_type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cloned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			emps<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Employees in Department {}: {:?}&quot;</span><span class="token punctuation">,</span> list_type<span class="token punctuation">,</span> emps<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Exiting...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Output</p>
<pre><code>Welcome: to the employee directory! when you are done type exit.
============================
Input: Add Sally to Engineering
Added Sally to engineering
Input: Add Amir to Sales
Added Amir to sales
Input: Add Juan to Accounting
Added Juan to accounting
Input: Add George to HR
Added George to hr
Input: Add Eric to Sales
Added Eric to sales
Input: Add Sam to Engineering
Added Sam to engineering
Input: Add Cole to Engineering
Added Cole to engineering
Input: List Employees
Employees: [&quot;Amir&quot;, &quot;Cole&quot;, &quot;Eric&quot;, &quot;George&quot;, &quot;Juan&quot;, &quot;Sally&quot;, &quot;Sam&quot;]
Input: List Sales
Employees in Department sales: [&quot;Amir&quot;, &quot;Eric&quot;]
Input: List Engineering
Employees in Department engineering: [&quot;Cole&quot;, &quot;Sally&quot;, &quot;Sam&quot;]
Input: List HR
Employees in Department hr: [&quot;George&quot;]
Input: Exit
Exiting...
</code></pre>
<p>Looks good!!</p>
<h3>Challenges</h3>
<p>The major hurdle when creating the solution above was how to split the input by whitespace into a vector of strings.  I asked ChatGPT for some help...</p>
<blockquote>
<p>How can this error be fixed?</p>
</blockquote>
<pre><code>a value of type `Vec&lt;&amp;String&gt;` cannot be built from an iterator over elements of type `&amp;str`
</code></pre>
<blockquote>
<p>the error comes from this line of rust code:</p>
</blockquote>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">let</span> command_words<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">split_whitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>The response which was very helpful.</p>
<blockquote>
<p>The error message suggests that the <code>split_whitespace()</code> method is returning an iterator over <code>&amp;str</code> values, but you are trying to collect them into a <code>Vec&lt;&amp;String&gt;</code>, which expects references to <code>String</code> values.
To fix this error, you can either change the type of <code>command_words</code> to <code>Vec&lt;&amp;str&gt;</code>:</p>
</blockquote>
<pre class="language-rust"><code class="language-rust">`<span class="token keyword">let</span> command_words<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span> <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">split_whitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`
</code></pre>
<blockquote>
<p>Or you can change the type of the elements in the <code>Vec</code> to <code>String</code> instead of <code>&amp;String</code>:</p>
</blockquote>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">let</span> command_words<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">split_whitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span>from<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`
</code></pre>
<blockquote>
<p>The <code>map()</code> method is used to transform each <code>&amp;str</code> value into a <code>String</code> value.</p>
</blockquote>
<h2>Refactoring</h2>
<p>Now time for the refactoring!! I asked how the code above could be more idiomatic. Here was the response.</p>
<blockquote>
<p>Here are some suggestions to make the Rust code more idiomatic:</p>
</blockquote>
<blockquote>
<ol>
<li>Use pattern matching instead of if/else statements:</li>
</ol>
</blockquote>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">match</span> cmd<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;add&quot;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> name <span class="token operator">=</span> command_words<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> dep <span class="token operator">=</span> command_words<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_lowercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Added {} to {}&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
        employees<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or_insert_with</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token punctuation">::</span>new<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token string">&quot;list&quot;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> list_type <span class="token operator">=</span> command_words<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">to_lowercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> list_type <span class="token operator">==</span> <span class="token string">&quot;employees&quot;</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> emps <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>_dept<span class="token punctuation">,</span> dept_emps<span class="token punctuation">)</span> <span class="token keyword">in</span> employees<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                emps<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>dept_emps<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            emps<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Employees: {:?}&quot;</span><span class="token punctuation">,</span> emps<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token boolean">true</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> emps <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list_type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cloned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            emps<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Employees in Department {}: {:?}&quot;</span><span class="token punctuation">,</span> list_type<span class="token punctuation">,</span> emps<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    _ <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Exiting...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<ol start="2">
<li>Use <code>if let</code> instead of <code>unwrap_or_default</code>:</li>
</ol>
</blockquote>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>emps<span class="token punctuation">)</span> <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list_type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> emps <span class="token operator">=</span> emps<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    emps<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Employees in Department {}: {:?}&quot;</span><span class="token punctuation">,</span> list_type<span class="token punctuation">,</span> emps<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Department {} not found&quot;</span><span class="token punctuation">,</span> list_type<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token boolean">true</span>
</code></pre>
<blockquote>
<ol start="3">
<li>Use <code>flatten</code> instead of nested loops:</li>
</ol>
</blockquote>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">let</span> emps <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatten</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cloned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Employees: {:?}&quot;</span><span class="token punctuation">,</span> emps<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token boolean">true</span>

</code></pre>
<blockquote>
<ol start="4">
<li>Use <code>&amp;str</code> instead of <code>String</code> when possible:</li>
</ol>
</blockquote>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">record_employee</span><span class="token punctuation">(</span>command<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> employees<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> command_words<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">&gt;</span> <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">split_whitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> cmd <span class="token operator">=</span> command_words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">to_lowercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">match</span> cmd<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;add&quot;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> name <span class="token operator">=</span> command_words<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> dep <span class="token operator">=</span> command_words<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">to_lowercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Added {} to {}&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
            employees<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or_insert_with</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token punctuation">::</span>new<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
        <span class="token string">&quot;list&quot;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> list_type <span class="token operator">=</span> command_words<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">to_lowercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> list_type <span class="token operator">==</span> <span class="token string">&quot;employees&quot;</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> emps <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatten</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cloned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Employees: {:?}&quot;</span><span class="token punctuation">,</span> emps<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token boolean">true</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>emps<span class="token punctuation">)</span> <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list_type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> <span class="token keyword">mut</span> emps <span class="token operator">=</span> emps<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                emps<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Employees in Department {}: {:?}&quot;</span><span class="token punctuation">,</span> list_type<span class="token punctuation">,</span> emps<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token boolean">true</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Department {} not found&quot;</span><span class="token punctuation">,</span> list_type<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token boolean">true</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        _ <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Exiting...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<ol start="5">
<li>Use <code>let mut</code> only when necessary:</li>
</ol>
</blockquote>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token keyword">mut</span> emps <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> dept_emps <span class="token keyword">in</span> employees<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    emps<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>dept_emps<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
emps<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Employees: {:?}&quot;</span><span class="token punctuation">,</span> emps<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token boolean">true</span>
</code></pre>
<p>Since it is broken into a few sections. I&#x27;ve put it all into a working code block below with the exception of point #5 because it conflicts with the flatten method #3. Flatten makes more sense to me. It is debatable that #5 is a clearer way to express the logic.</p>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> <span class="token keyword">mut</span> employees_real<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> <span class="token keyword">mut</span> repeat <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	
	<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Welcome: to the employee directory! when you are done type exit.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;============================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">while</span> repeat <span class="token punctuation">{</span>
		<span class="token keyword">let</span> <span class="token keyword">mut</span> input <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> input<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid input!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> input <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Input: {}&quot;</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>
		repeat <span class="token operator">=</span> <span class="token function">record_employee</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> employees_real<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">record_employee</span><span class="token punctuation">(</span>command<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">,</span> employees<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> command_words<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">&gt;</span> <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">split_whitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> cmd <span class="token operator">=</span> command_words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">to_lowercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">match</span> cmd<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		
		<span class="token string">&quot;add&quot;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		    <span class="token keyword">let</span> name <span class="token operator">=</span> command_words<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		    <span class="token keyword">let</span> dep <span class="token operator">=</span> command_words<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">to_lowercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Added {} to {}&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
		    employees<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or_insert_with</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token punctuation">::</span>new<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
		    <span class="token boolean">true</span>
	    <span class="token punctuation">}</span>
		
	    <span class="token string">&quot;list&quot;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		    <span class="token keyword">let</span> list_type <span class="token operator">=</span> command_words<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">to_lowercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		    <span class="token keyword">if</span> list_type <span class="token operator">==</span> <span class="token string">&quot;employees&quot;</span> <span class="token punctuation">{</span>
			    <span class="token keyword">let</span> <span class="token keyword">mut</span> emps <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatten</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cloned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			    emps<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Employees: {:?}&quot;</span><span class="token punctuation">,</span> emps<span class="token punctuation">)</span><span class="token punctuation">;</span>
		    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>emps<span class="token punctuation">)</span> <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list_type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">let</span> <span class="token keyword">mut</span> emps <span class="token operator">=</span> emps<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				emps<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Employees in Department {}: {:?}&quot;</span><span class="token punctuation">,</span> list_type<span class="token punctuation">,</span> emps<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Department {} not found&quot;</span><span class="token punctuation">,</span> list_type<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token boolean">true</span>
	    <span class="token punctuation">}</span>
		
	    _ <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Exiting...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		    <span class="token boolean">false</span>
	    <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Output</p>
<pre><code>Welcome: to the employee directory! when you are done type exit.
============================
Input: Add Sally to Engineering
Added Sally to engineering
Input: Add Amir to Sales
Added Amir to sales
Input: Add Juan to Accounting
Added Juan to accounting
Input: Add George to HR
Added George to hr
Input: Add Eric to Sales
Added Eric to sales
Input: Add Sam to Engineering
Added Sam to engineering
Input: Add Cole to Engineering
Added Cole to engineering
Input: List Employees
Employees: [&quot;Amir&quot;, &quot;Cole&quot;, &quot;Eric&quot;, &quot;George&quot;, &quot;Juan&quot;, &quot;Sally&quot;, &quot;Sam&quot;]
Input: List Sales
Employees in Department sales: [&quot;Amir&quot;, &quot;Eric&quot;]
Input: List Engineering
Employees in Department engineering: [&quot;Cole&quot;, &quot;Sally&quot;, &quot;Sam&quot;]
Input: List HR
Employees in Department hr: [&quot;George&quot;]
Input: Exit
Exiting...
</code></pre>
<p>Overall I&#x27;m impressed with the result. I think it helped show how to use the <code>collect::&lt;T&gt;()</code> method to convert types and how to use <code>if let</code> idiomatically.</p>]]></content:encoded>
            <author>spencer@planetaria.tech (Spencer Sharp)</author>
        </item>
        <item>
            <title><![CDATA[Median and Mode in Rust]]></title>
            <link>https://daniel-butler.com/articles/median-and-mode-rust</link>
            <guid>https://daniel-butler.com/articles/median-and-mode-rust</guid>
            <pubDate>Sun, 05 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[First example in the Rust book. Refactored with ChatGPT 4s help.]]></description>
            <content:encoded><![CDATA[<p>This is the second example I&#x27;m working on from the <a href="https://doc.rust-lang.org/stable/book/ch08-03-hash-maps.html#summary">rust book</a>.</p>
<p>In python, I&#x27;ve used the statistics standard library module as the test case to validate the code written in the &quot;brute force method&quot;. If this was production code, I would use the statistics module instead of rolling my own.</p>
<h2>Problem Statement</h2>
<p>Given a list of integers, use a vector and return the median (when sorted, the value in the middle position) and mode (the value that occurs most often; a hash map will be helpful here) of the list.</p>
<h3>Input</h3>
<pre><code>[13, 8, 2, 21, 21, 6, 27, 15, 14, 22, 17, 16, 7, 15, 12, 10, 25, 21, 27, 29, 17, 29, 26, 10, 14, 11, 23, 8, 27, 4]
</code></pre>
<h1>Median</h1>
<p>What we are looking for is when sorted, the value in the middle position of an array of numbers. When there are an even number of values in the array then find the middle value between the two middle entries.</p>
<h2>Python</h2>
<pre class="language-python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">[</span>
		<span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">4</span>
<span class="token punctuation">]</span>

nums <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
	median <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
	middle_index <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
	first_index <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>middle_index <span class="token operator">-</span> <span class="token number">.5</span><span class="token punctuation">)</span>
	second_index <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>middle_index <span class="token operator">+</span> <span class="token number">.5</span><span class="token punctuation">)</span>
	median <span class="token operator">=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>first_index<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>second_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Median Brute method: </span><span class="token interpolation"><span class="token punctuation">{</span>median<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">import</span> statistics
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Median Standard library method: </span><span class="token interpolation"><span class="token punctuation">{</span>statistics<span class="token punctuation">.</span>median<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre>
<p>Output</p>
<pre><code>Median Brute method: 15.5
Median Standard library method: 15.5
</code></pre>
<h2>Rust</h2>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> <span class="token keyword">mut</span> nums <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;Median: {}&quot;</span><span class="token punctuation">,</span> <span class="token function">median</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">median</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">f32</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> length<span class="token punctuation">:</span> <span class="token keyword">f32</span><span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> middle_index<span class="token punctuation">:</span> <span class="token keyword">f32</span> <span class="token operator">=</span> length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
	
	<span class="token keyword">match</span> nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token punctuation">{</span>
		<span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> first<span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token punctuation">(</span>middle_index <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">u32</span> <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">let</span> second <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token punctuation">(</span>middle_index <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">u32</span> <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token punctuation">(</span>first <span class="token keyword">as</span> <span class="token keyword">f32</span> <span class="token operator">+</span> second <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">.</span>
		<span class="token punctuation">}</span>
		_ <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> nums<span class="token punctuation">[</span>middle_index <span class="token keyword">as</span> <span class="token keyword">u32</span> <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">f32</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Output</p>
<pre><code>Median: 15.5
</code></pre>
<h2>Challenges</h2>
<p>Not understanding Scope and types being returned. My solution was to put the logic into its own function.</p>
<pre><code>error[E0425]: cannot find value `median` in this scope
  --&gt; compiler.rs:21:23
   |
21 |     print!(&quot;Median: {}&quot;, median)
   |                          ^^^^^^ not found in this scope
</code></pre>
<p>Numbers are not all the same type. I solved it by casting the numbers into the proper type. Sometimes casting the numbers twice because <code>f32</code> can&#x27;t be cast into <code>usize</code> type. <a href="https://stackoverflow.com/a/44552464/7838574">This stack overflow</a> helped get me to the solution.</p>
<pre><code>error[E0277]: cannot subtract `{float}` from `usize`
  --&gt; compiler.rs:12:34
   |
12 |             let first = nums[middle_index - 0.5];
   |                                           ^ no implementation for `usize - {float}`
</code></pre>
<h1>Mode</h1>
<h2>Python</h2>
<pre class="language-python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">[</span>
		<span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">4</span>
<span class="token punctuation">]</span>

count_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
	count_dict<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> count_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
	
mode_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
highest <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> count_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	val_list <span class="token operator">=</span> mode_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	val_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
	mode_dict<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> val_list
	<span class="token keyword">if</span> value <span class="token operator">&gt;</span> highest<span class="token punctuation">:</span>
		highest <span class="token operator">=</span> value

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Mode Brute force method: </span><span class="token interpolation"><span class="token punctuation">{</span>mode_dict<span class="token punctuation">[</span>highest<span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">import</span> statistics
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Mode Standard library method: </span><span class="token interpolation"><span class="token punctuation">{</span>statistics<span class="token punctuation">.</span>mode<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre>
<p>Output</p>
<pre><code>Mode Brute force method: [21, 27]

statistics.StatisticsError: no unique mode; found 2 equally common values
</code></pre>
<p>The statistics standard library throws an error because there are two most common values.</p>
<h2>Rust</h2>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> <span class="token keyword">mut</span> nums <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	
	<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Mode: {:?}&quot;</span><span class="token punctuation">,</span> <span class="token function">mode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">mode</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> <span class="token keyword">mut</span> counter <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">for</span> num <span class="token keyword">in</span> nums <span class="token punctuation">{</span>
		<span class="token keyword">match</span> counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">Some</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> counter<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token class-name">None</span> <span class="token operator">=&gt;</span> counter<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">let</span> <span class="token keyword">mut</span> moder<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token punctuation">,</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> <span class="token keyword">mut</span> highest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token operator">&amp;</span>counter <span class="token punctuation">{</span>
		<span class="token keyword">if</span> value <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>highest <span class="token punctuation">{</span>
			highest <span class="token operator">=</span> <span class="token operator">*</span>value<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">match</span> moder<span class="token punctuation">.</span><span class="token function">get_mut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">Some</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				<span class="token keyword">let</span> <span class="token keyword">mut</span> ks <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				ks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
				moder<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">*</span>value<span class="token punctuation">,</span> ks<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				<span class="token keyword">let</span> <span class="token keyword">mut</span> keys <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
				moder<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">*</span>value<span class="token punctuation">,</span> keys<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span> <span class="token operator">=</span> moder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>highest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> keys<span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>When I asked ChatGPT how I can make the code more idiomatic. This was the response</p>
<blockquote>
<p>Here are some suggestions to make the Rust code more idiomatic:</p>
<ol>
<li>Use a <code>&amp;[u32]</code> slice instead of a <code>Vec&lt;u32&gt;</code> for the function parameters. This allows the function to accept both a <code>Vec&lt;u32&gt;</code> and a slice, which is more flexible.</li>
<li>Use <code>unwrap_or</code> instead of the <code>match</code> statement in the <code>mode</code> function to insert a value into the hash map with a default value of 1 if the key does not exist.</li>
<li>Use <code>entry</code> method to insert or update values in the hash map.</li>
<li>Use <code>iter()</code> method instead of a reference to iterate over the vector elements.</li>
<li>Use <code>collect</code> method to convert an iterator to a vector.</li>
<li>Use <code>copied</code> method to create an iterator over the copied elements.</li>
<li>Use <code>cloned</code> method to create an iterator over the cloned elements.</li>
</ol>
<p>Here&#x27;s the updated code:</p>
</blockquote>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span> 

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">let</span> <span class="token keyword">mut</span> nums <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> 
    nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Median: {}&quot;</span><span class="token punctuation">,</span> <span class="token function">median</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Mode: {:?}&quot;</span><span class="token punctuation">,</span> <span class="token function">mode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">fn</span> <span class="token function-definition function">median</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u32</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">f32</span> <span class="token punctuation">{</span> 
    <span class="token keyword">let</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">match</span> length <span class="token operator">%</span> <span class="token number">2</span> <span class="token punctuation">{</span> 
        <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
            <span class="token keyword">let</span> first <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token punctuation">(</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
            <span class="token keyword">let</span> second <span class="token operator">=</span> nums<span class="token punctuation">[</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
            <span class="token punctuation">(</span>first asf32 <span class="token operator">+</span> second <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">.</span>
         <span class="token punctuation">}</span><span class="token punctuation">,</span>
         _ <span class="token operator">=&gt;</span> nums<span class="token punctuation">[</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">f32</span><span class="token punctuation">,</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">fn</span> <span class="token function-definition function">mode</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u32</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> 
    <span class="token keyword">let</span> <span class="token keyword">mut</span> counter <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token operator">*</span>counter<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or_insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
    
    <span class="token keyword">let</span> <span class="token keyword">mut</span> moder<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token punctuation">,</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">let</span> <span class="token keyword">mut</span> highest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    <span class="token keyword">for</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token operator">&amp;</span>counter <span class="token punctuation">{</span> 
        <span class="token keyword">if</span> value <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>highest <span class="token punctuation">{</span> 
            highest <span class="token operator">=</span> <span class="token operator">*</span>value<span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
        moder<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token operator">*</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or_insert_with</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token punctuation">::</span>new<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
    moder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>highest<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">copied</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre>
<p>When running the program it produced the following errors</p>
<pre><code>error[E0308]: mismatched types
  --&gt; compiler.rs:41:59
   |
41 |         moder.entry(*value).or_insert_with(Vec::new).push(*key);
   |                                                      ---- ^^^^ expected `u32`, found `&amp;u32`
   |                                                      |
   |                                                      arguments to this function are incorrect
   |
note: associated function defined here
help: consider dereferencing the borrow
   |
41 |         moder.entry(*value).or_insert_with(Vec::new).push(**key);
   |                                                           +

error[E0277]: the trait bound `Vec&lt;u32&gt;: Copy` is not satisfied
  --&gt; compiler.rs:44:25
   |
44 |     moder.get(&amp;highest).copied().unwrap_or_default().collect()
   |                         ^^^^^^ the trait `Copy` is not implemented for `Vec&lt;u32&gt;`
   |
note: required by a bound in `Option::&lt;&amp;T&gt;::copied`

error[E0599]: `Vec&lt;u32&gt;` is not an iterator
  --&gt; compiler.rs:44:54
   |
44 |       moder.get(&amp;highest).copied().unwrap_or_default().collect()
   |                                                        ^^^^^^^ `Vec&lt;u32&gt;` is not an iterator; try calling `.into_iter()` or `.iter()`
   |
   = note: the following trait bounds were not satisfied:
           `Vec&lt;u32&gt;: Iterator`
           which is required by `&amp;mut Vec&lt;u32&gt;: Iterator`
           `[u32]: Iterator`
           which is required by `&amp;mut [u32]: Iterator`

error: aborting due to 3 previous errors

Some errors have detailed explanations: E0277, E0308, E0599.
For more information about an error, try `rustc --explain E0277`.
</code></pre>
<p>The first error complaining about using a <code>&amp;key</code> was easy to fix with another deference. The second error related to copying the <code>Vec&lt;u32&gt;</code> , a type on the heap, was fixed by cloning instead. <a href="https://stackoverflow.com/a/63127877/7838574">This stack overflow answer</a> helped figure that one out.</p>
<p>What did I learn from ChatGPTs revision?</p>
<ul>
<li>When borrowing a vector it it&#x27;s probably best to use a slice. <a href="https://stackoverflow.com/a/32573802/7838574">This stack overflow</a> elucidates it well.</li>
<li>Hashmap&#x27;s <code>Entry</code>&#x27;s are extremely helpful.</li>
</ul>
<blockquote>
<p>Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry. <a href="https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html">Rust docs</a></p>
</blockquote>]]></content:encoded>
            <author>spencer@planetaria.tech (Spencer Sharp)</author>
        </item>
        <item>
            <title><![CDATA[Rust Book Examples]]></title>
            <link>https://daniel-butler.com/articles/rust-examples</link>
            <guid>https://daniel-butler.com/articles/rust-examples</guid>
            <pubDate>Sun, 05 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Rust Book example and solutions index. Refactored with ChatGPT 4s help.]]></description>
            <content:encoded><![CDATA[<h2>Introduction</h2>
<p>This is the collection of completed examples while working  though the excellently written <a href="https://doc.rust-lang.org/stable/book/">rust book</a> on a journey to learn Rust.</p>
<p>My experience with programming while going through this book is mostly python, a few years of JavaScript, a little less of typescript, and about a year and a half of Java. This is my second attempt to go through the book. At the time, types and differences in computers memory didn&#x27;t really click. This time around the decisions made with the language are making a lot more sense.</p>
<p>Since I don&#x27;t have any real world problems to solve with rust, I&#x27;m completing every example and will be posting it here. Also, to help give feedback and to test chat gpt I&#x27;m using it to review the code.</p>
<h2>Chapters</h2>
<h3>8</h3>
<ul>
<li>8.3 <a href="https://www.daniel-butler.com/articles/median-and-mode-rust">Median and Mode</a></li>
<li>8.3 <a href="https://www.daniel-butler.com/articles/ust-ray%E2%80%94y-bay%E2%80%94example-fay">Pig Latin</a></li>
<li>8.3 <a href="https://daniel-butler.com">Employee Directory</a></li>
</ul>
<h3>17</h3>
<ul>
<li>3 <a href="https://www.daniel-butler.com/articles/rust-dyn-traits-example">Dynamic Traits</a></li>
</ul>
<p>More to come!</p>]]></content:encoded>
            <author>spencer@planetaria.tech (Spencer Sharp)</author>
        </item>
        <item>
            <title><![CDATA[ust-ray y-bay example-fay]]></title>
            <link>https://daniel-butler.com/articles/ust-ray—y-bay—example-fay</link>
            <guid>https://daniel-butler.com/articles/ust-ray—y-bay—example-fay</guid>
            <pubDate>Fri, 03 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Python and Rust code helps translate English to Pig Latin! Learn how to speak like a pro with this code, and avoid the pitfalls of type mismatches in Rust.]]></description>
            <content:encoded><![CDATA[<p>This is a part of the series going through the <a href="https://doc.rust-lang.org/stable/book/ch08-03-hash-maps.html#summary">rust book</a>. I&#x27;m most comfortable with python code, so I&#x27;ve sketched out the program to be written in rust with python first. It helps iron out misunderstandings.</p>
<h2>Requirements</h2>
<p>Convert strings to pig latin. The first consonant of each word is moved to the end of the word and “ay” is added, so “first” becomes “irst-fay.” Words that start with a vowel have “hay” added to the end instead (“apple” becomes “apple-hay”). Keep in mind the details about UTF-8 encoding!</p>
<h2>Python Version</h2>
<pre class="language-python"><code class="language-python">words <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

output_words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
		<span class="token keyword">continue</span>
		
	start <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
	end <span class="token operator">=</span> <span class="token string">&quot;ay&quot;</span>
	new_word <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
	
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> letter <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">if</span> letter<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">[</span>
			<span class="token string">&#x27;a&#x27;</span><span class="token punctuation">,</span> <span class="token string">&#x27;e&#x27;</span><span class="token punctuation">,</span> <span class="token string">&#x27;i&#x27;</span><span class="token punctuation">,</span> <span class="token string">&#x27;o&#x27;</span><span class="token punctuation">,</span> <span class="token string">&#x27;u&#x27;</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">:</span>
			start <span class="token operator">=</span> <span class="token string">&quot;f&quot;</span> <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> start
			new_word <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>word<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token format-spec">]</span><span class="token punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">{</span>start<span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span>end<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
			<span class="token keyword">break</span>
		
		start <span class="token operator">+=</span> letter
		
	output_words<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_word<span class="token punctuation">)</span>
	
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>output_words<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>English Input
<code>This is a great example of what it means to speak a foreign language with class.</code></p>
<p>Translated
<code>is-Thay is-fay a-fay eat-gray example-fay of-fay at-whay it-fay eans-may o-tay eak-spay a-fay oreign-fay anguage-lay ith-way ass.-clay</code></p>
<h2>Rust version</h2>
<p>I did use this <a href="https://codereview.stackexchange.com/questions/278267/rust-pig-latin-exercise-solution">stack overflow</a> to unstick myself.</p>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> <span class="token constant">VOWELS</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">char</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token char">&#x27;a&#x27;</span><span class="token punctuation">,</span> <span class="token char">&#x27;e&#x27;</span><span class="token punctuation">,</span> <span class="token char">&#x27;i&#x27;</span><span class="token punctuation">,</span> <span class="token char">&#x27;o&#x27;</span><span class="token punctuation">,</span> <span class="token char">&#x27;u&#x27;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> <span class="token keyword">mut</span> input <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> input<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;E most String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> input <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">let</span> <span class="token keyword">mut</span> translated_words<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> word <span class="token keyword">in</span> input<span class="token punctuation">.</span><span class="token function">split_whitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> <span class="token keyword">mut</span> start <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> <span class="token keyword">mut</span> translated_word <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> <span class="token keyword">mut</span> complete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> letter <span class="token keyword">in</span> word<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> complete <span class="token punctuation">{</span>
				translated_word<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>
			
			<span class="token keyword">if</span> <span class="token constant">VOWELS</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>letter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> start<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
					start <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				translated_word<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>
				complete <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
				
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				start<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		
		translated_word <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;{}-{}ay&quot;</span><span class="token punctuation">,</span> translated_word<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		translated_words<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>translated_word<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> translated_words<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>English Input
<code>This is a great example of what it means to speak a foreign language with class.</code></p>
<p>Translated
<code>is-Thay is-fay a-fay eat-gray example-fay of-fay at-whay it-fay eans-may o-tay eak-spay a-fay oreign-fay anguage-lay ith-way ass.-clay</code></p>
<h2>Challenges</h2>
<p>Creating the <code>{}-{}ay</code> because of Type mismatch of <code>String</code> and <code>str</code>. The problem seemed to be because I was adding a vector of chars and a string together.</p>
<pre><code>error[E0308]: mismatched types
  --&gt; compiler.rs:31:22
   |
31 |         translated_word += format!(&quot;-{}ay&quot;, &amp;(*start.as_str()));
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&amp;str`, found struct `String`
   |
   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error: aborting due to previous error

For more information about this error, try `rustc --explain E0308`.
</code></pre>]]></content:encoded>
            <author>spencer@planetaria.tech (Spencer Sharp)</author>
        </item>
    </channel>
</rss>