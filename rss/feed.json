{
    "version": "https://jsonfeed.org/version/1",
    "title": "Spencer Sharp",
    "home_page_url": "https://daniel-butler.com",
    "feed_url": "https://daniel-butler.com/rss/feed.json",
    "description": "Your blog description",
    "icon": "https://daniel-butler.com/favicon.ico",
    "author": {
        "name": "Spencer Sharp"
    },
    "items": [
        {
            "id": "https://daniel-butler.com/articles/ust-ray—y-bay—example-fay",
            "content_html": "<p>This is a part of the series going through the <a href=\"https://doc.rust-lang.org/stable/book/ch08-03-hash-maps.html#summary\">rust book</a>. I&#x27;m most comfortable with python code, so I&#x27;ve sketched out the program to be written in rust with python first. It helps iron out misunderstandings.</p>\n<h2>Requirements</h2>\n<p>Convert strings to pig latin. The first consonant of each word is moved to the end of the word and “ay” is added, so “first” becomes “irst-fay.” Words that start with a vowel have “hay” added to the end instead (“apple” becomes “apple-hay”). Keep in mind the details about UTF-8 encoding!</p>\n<h2>Python Version</h2>\n<pre class=\"language-python\"><code class=\"language-python\">words <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\noutput_words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> words<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">&quot; &quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">continue</span>\n\t\t\n\tstart <span class=\"token operator\">=</span> <span class=\"token string\">&quot;&quot;</span>\n\tend <span class=\"token operator\">=</span> <span class=\"token string\">&quot;ay&quot;</span>\n\tnew_word <span class=\"token operator\">=</span> <span class=\"token string\">&quot;&quot;</span>\n\t\n\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> letter <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> letter<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span>\n\t\t\t<span class=\"token string\">&#x27;a&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&#x27;e&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&#x27;i&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&#x27;o&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&#x27;u&#x27;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t\t\tstart <span class=\"token operator\">=</span> <span class=\"token string\">&quot;f&quot;</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> start\n\t\t\tnew_word <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f&quot;</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>word<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token format-spec\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>start<span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>end<span class=\"token punctuation\">}</span></span><span class=\"token string\">&quot;</span></span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t\n\t\tstart <span class=\"token operator\">+=</span> letter\n\t\t\n\toutput_words<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>new_word<span class=\"token punctuation\">)</span>\n\t\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot; &quot;</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>output_words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>English Input\n<code>This is a great example of what it means to speak a foreign language with class.</code></p>\n<p>Translated\n<code>is-Thay is-fay a-fay eat-gray example-fay of-fay at-whay it-fay eans-may o-tay eak-spay a-fay oreign-fay anguage-lay ith-way ass.-clay</code></p>\n<h2>Rust version</h2>\n<p>I did use this <a href=\"https://codereview.stackexchange.com/questions/278267/rust-pig-latin-exercise-solution\">stack overflow</a> to unstick myself.</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token constant\">VOWELS</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token char\">&#x27;a&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token char\">&#x27;e&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token char\">&#x27;i&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token char\">&#x27;o&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token char\">&#x27;u&#x27;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> input <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;E most String&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> translated_words<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split_whitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> translated_word <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> complete <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> letter <span class=\"token keyword\">in</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> complete <span class=\"token punctuation\">{</span>\n\t\t\t\ttranslated_word<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token constant\">VOWELS</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>letter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> start<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tstart <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;f&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\ttranslated_word<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcomplete <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tstart<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\ttranslated_word <span class=\"token operator\">=</span> <span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;{}-{}ay&quot;</span><span class=\"token punctuation\">,</span> translated_word<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\ttranslated_words<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>translated_word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;{}&quot;</span><span class=\"token punctuation\">,</span> translated_words<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot; &quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>English Input\n<code>This is a great example of what it means to speak a foreign language with class.</code></p>\n<p>Translated\n<code>is-Thay is-fay a-fay eat-gray example-fay of-fay at-whay it-fay eans-may o-tay eak-spay a-fay oreign-fay anguage-lay ith-way ass.-clay</code></p>\n<h2>Challenges</h2>\n<p>Creating the <code>{}-{}ay</code> because of Type mismatch of <code>String</code> and <code>str</code>. The problem seemed to be because I was adding a vector of chars and a string together.</p>\n<pre><code>error[E0308]: mismatched types\n  --&gt; compiler.rs:31:22\n   |\n31 |         translated_word += format!(&quot;-{}ay&quot;, &amp;(*start.as_str()));\n   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&amp;str`, found struct `String`\n   |\n   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n</code></pre>",
            "url": "https://daniel-butler.com/articles/ust-ray—y-bay—example-fay",
            "title": "ust-ray y-bay example-fay",
            "summary": "Python and Rust code helps translate English to Pig Latin! Learn how to speak like a pro with this code, and avoid the pitfalls of type mismatches in Rust.",
            "date_modified": "2023-03-03T00:00:00.000Z",
            "author": {
                "name": "Spencer Sharp"
            }
        }
    ]
}