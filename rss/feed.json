{
    "version": "https://jsonfeed.org/version/1",
    "title": "Spencer Sharp",
    "home_page_url": "https://daniel-butler.com",
    "feed_url": "https://daniel-butler.com/rss/feed.json",
    "description": "Your blog description",
    "icon": "https://daniel-butler.com/favicon.ico",
    "author": {
        "name": "Spencer Sharp"
    },
    "items": [
        {
            "id": "https://daniel-butler.com/articles/median-and-mode-rust",
            "content_html": "<p>This is the second example I&#x27;m working on from the <a href=\"https://doc.rust-lang.org/stable/book/ch08-03-hash-maps.html#summary\">rust book</a>.</p>\n<p>In python, I&#x27;ve used the statistics standard library module as the test case to validate the code written in the &quot;brute force method&quot;. If this was production code, I would use the statistics module instead of rolling my own.</p>\n<h2>Problem Statement</h2>\n<p>Given a list of integers, use a vector and return the median (when sorted, the value in the middle position) and mode (the value that occurs most often; a hash map will be helpful here) of the list.</p>\n<h3>Input</h3>\n<pre><code>[13, 8, 2, 21, 21, 6, 27, 15, 14, 22, 17, 16, 7, 15, 12, 10, 25, 21, 27, 29, 17, 29, 26, 10, 14, 11, 23, 8, 27, 4]\n</code></pre>\n<h1>Median</h1>\n<p>What we are looking for is when sorted, the value in the middle position of an array of numbers. When there are an even number of values in the array then find the middle value between the two middle entries.</p>\n<h2>Python</h2>\n<pre class=\"language-python\"><code class=\"language-python\">nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">]</span>\n\nnums <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n\tmedian <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\tmiddle_index <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n\tfirst_index <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>middle_index <span class=\"token operator\">-</span> <span class=\"token number\">.5</span><span class=\"token punctuation\">)</span>\n\tsecond_index <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>middle_index <span class=\"token operator\">+</span> <span class=\"token number\">.5</span><span class=\"token punctuation\">)</span>\n\tmedian <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>first_index<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>nums<span class=\"token punctuation\">[</span>second_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f&quot;Median Brute method: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>median<span class=\"token punctuation\">}</span></span><span class=\"token string\">&quot;</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">import</span> statistics\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f&quot;Median Standard library method: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>statistics<span class=\"token punctuation\">.</span>median<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">&quot;</span></span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Output</p>\n<pre><code>Median Brute method: 15.5\nMedian Standard library method: 15.5\n</code></pre>\n<h2>Rust</h2>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> nums <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\tnums<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">print!</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;Median: {}&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token function\">median</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">median</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u32</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">f32</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> length<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f32</span><span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">f32</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">let</span> middle_index<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f32</span> <span class=\"token operator\">=</span> length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">match</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token number\">0</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">let</span> first<span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>middle_index <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">u32</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">let</span> second <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>middle_index <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">u32</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>first <span class=\"token keyword\">as</span> <span class=\"token keyword\">f32</span> <span class=\"token operator\">+</span> second <span class=\"token keyword\">as</span> <span class=\"token keyword\">f32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">.</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t_ <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>middle_index <span class=\"token keyword\">as</span> <span class=\"token keyword\">u32</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">usize</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">f32</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Output</p>\n<pre><code>Median: 15.5\n</code></pre>\n<h2>Challenges</h2>\n<p>Not understanding Scope and types being returned. My solution was to put the logic into its own function.</p>\n<pre><code>error[E0425]: cannot find value `median` in this scope\n  --&gt; compiler.rs:21:23\n   |\n21 |     print!(&quot;Median: {}&quot;, median)\n   |                          ^^^^^^ not found in this scope\n</code></pre>\n<p>Numbers are not all the same type. I solved it by casting the numbers into the proper type. Sometimes casting the numbers twice because <code>f32</code> can&#x27;t be cast into <code>usize</code> type. <a href=\"https://stackoverflow.com/a/44552464/7838574\">This stack overflow</a> helped get me to the solution.</p>\n<pre><code>error[E0277]: cannot subtract `{float}` from `usize`\n  --&gt; compiler.rs:12:34\n   |\n12 |             let first = nums[middle_index - 0.5];\n   |                                           ^ no implementation for `usize - {float}`\n</code></pre>\n<h1>Mode</h1>\n<h2>Python</h2>\n<pre class=\"language-python\"><code class=\"language-python\">nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">]</span>\n\ncount_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n\tcount_dict<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count_dict<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\t\nmode_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nhighest <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> count_dict<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tval_list <span class=\"token operator\">=</span> mode_dict<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\tval_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\tmode_dict<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val_list\n\t<span class=\"token keyword\">if</span> value <span class=\"token operator\">&gt;</span> highest<span class=\"token punctuation\">:</span>\n\t\thighest <span class=\"token operator\">=</span> value\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f&quot;Mode Brute force method: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>mode_dict<span class=\"token punctuation\">[</span>highest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">&quot;</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">import</span> statistics\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f&quot;Mode Standard library method: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>statistics<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">&quot;</span></span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Output</p>\n<pre><code>Mode Brute force method: [21, 27]\n\nstatistics.StatisticsError: no unique mode; found 2 equally common values\n</code></pre>\n<p>The statistics standard library throws an error because there are two most common values.</p>\n<h2>Rust</h2>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>collections<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> nums <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;Mode: {:?}&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">mode</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u32</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u32</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> counter <span class=\"token operator\">=</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">match</span> counter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> counter<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">None</span> <span class=\"token operator\">=&gt;</span> counter<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> moder<span class=\"token punctuation\">:</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u32</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> highest <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span>counter <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> value <span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span>highest <span class=\"token punctuation\">{</span>\n\t\t\thighest <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>value<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">match</span> moder<span class=\"token punctuation\">.</span><span class=\"token function\">get_mut</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ks <span class=\"token operator\">=</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">to_vec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tmoder<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>value<span class=\"token punctuation\">,</span> ks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">None</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> keys <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tkeys<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tmoder<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>value<span class=\"token punctuation\">,</span> keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> moder<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>highest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">to_vec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>When I asked ChatGPT how I can make the code more idiomatic. This was the response</p>\n<blockquote>\n<p>Here are some suggestions to make the Rust code more idiomatic:</p>\n<ol>\n<li>Use a <code>&amp;[u32]</code> slice instead of a <code>Vec&lt;u32&gt;</code> for the function parameters. This allows the function to accept both a <code>Vec&lt;u32&gt;</code> and a slice, which is more flexible.</li>\n<li>Use <code>unwrap_or</code> instead of the <code>match</code> statement in the <code>mode</code> function to insert a value into the hash map with a default value of 1 if the key does not exist.</li>\n<li>Use <code>entry</code> method to insert or update values in the hash map.</li>\n<li>Use <code>iter()</code> method instead of a reference to iterate over the vector elements.</li>\n<li>Use <code>collect</code> method to convert an iterator to a vector.</li>\n<li>Use <code>copied</code> method to create an iterator over the copied elements.</li>\n<li>Use <code>cloned</code> method to create an iterator over the cloned elements.</li>\n</ol>\n<p>Here&#x27;s the updated code:</p>\n</blockquote>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>collections<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> nums <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n    nums<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;Median: {}&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token function\">median</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;Mode: {:?}&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">median</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span> <span class=\"token keyword\">f32</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">match</span> length <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token number\">0</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> \n            <span class=\"token keyword\">let</span> first <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">let</span> second <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">(</span>first asf32 <span class=\"token operator\">+</span> second <span class=\"token keyword\">as</span> <span class=\"token keyword\">f32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">.</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n         _ <span class=\"token operator\">=&gt;</span> nums<span class=\"token punctuation\">[</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">f32</span><span class=\"token punctuation\">,</span> \n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">mode</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-&gt;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u32</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> counter <span class=\"token operator\">=</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token operator\">*</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or_insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span> \n    \n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> moder<span class=\"token punctuation\">:</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">u32</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> highest <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&amp;</span>counter <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">if</span> value <span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span>highest <span class=\"token punctuation\">{</span> \n            highest <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>value<span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span> \n        moder<span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or_insert_with</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span>new<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span> \n    moder<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>highest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">copied</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_or_default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>When running the program it produced the following errors</p>\n<pre><code>error[E0308]: mismatched types\n  --&gt; compiler.rs:41:59\n   |\n41 |         moder.entry(*value).or_insert_with(Vec::new).push(*key);\n   |                                                      ---- ^^^^ expected `u32`, found `&amp;u32`\n   |                                                      |\n   |                                                      arguments to this function are incorrect\n   |\nnote: associated function defined here\nhelp: consider dereferencing the borrow\n   |\n41 |         moder.entry(*value).or_insert_with(Vec::new).push(**key);\n   |                                                           +\n\nerror[E0277]: the trait bound `Vec&lt;u32&gt;: Copy` is not satisfied\n  --&gt; compiler.rs:44:25\n   |\n44 |     moder.get(&amp;highest).copied().unwrap_or_default().collect()\n   |                         ^^^^^^ the trait `Copy` is not implemented for `Vec&lt;u32&gt;`\n   |\nnote: required by a bound in `Option::&lt;&amp;T&gt;::copied`\n\nerror[E0599]: `Vec&lt;u32&gt;` is not an iterator\n  --&gt; compiler.rs:44:54\n   |\n44 |       moder.get(&amp;highest).copied().unwrap_or_default().collect()\n   |                                                        ^^^^^^^ `Vec&lt;u32&gt;` is not an iterator; try calling `.into_iter()` or `.iter()`\n   |\n   = note: the following trait bounds were not satisfied:\n           `Vec&lt;u32&gt;: Iterator`\n           which is required by `&amp;mut Vec&lt;u32&gt;: Iterator`\n           `[u32]: Iterator`\n           which is required by `&amp;mut [u32]: Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n</code></pre>\n<p>The first error complaining about using a <code>&amp;key</code> was easy to fix with another deference. The second error related to copying the <code>Vec&lt;u32&gt;</code> , a type on the heap, was fixed by cloning instead. <a href=\"https://stackoverflow.com/a/63127877/7838574\">This stack overflow answer</a> helped figure that one out.</p>\n<p>What did I learn from ChatGPTs revision?</p>\n<ul>\n<li>When borrowing a vector it it&#x27;s probably best to use a slice. <a href=\"https://stackoverflow.com/a/32573802/7838574\">This stack overflow</a> elucidates it well.</li>\n<li>Hashmap&#x27;s <code>Entry</code>&#x27;s are extremely helpful.</li>\n</ul>\n<blockquote>\n<p>Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry. <a href=\"https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html\">Rust docs</a></p>\n</blockquote>",
            "url": "https://daniel-butler.com/articles/median-and-mode-rust",
            "title": "Median and Mode in Rust",
            "summary": "First example in the Rust book. Refactored with ChatGPT 4s help.",
            "date_modified": "2023-03-05T00:00:00.000Z",
            "author": {
                "name": "Spencer Sharp"
            }
        },
        {
            "id": "https://daniel-butler.com/articles/rust-examples",
            "content_html": "<h2>Introduction</h2>\n<p>This is the collection of completed examples while working  though the excellently written <a href=\"https://doc.rust-lang.org/stable/book/\">rust book</a> on a journey to learn Rust.</p>\n<p>My experience with programming while going through this book is mostly python, a few years of JavaScript, a little less of typescript, and about a year and a half of Java. This is my second attempt to go through the book. At the time, types and differences in computers memory didn&#x27;t really click. This time around the decisions made with the language are making a lot more sense.</p>\n<p>Since I don&#x27;t have any real world problems to solve with rust, I&#x27;m completing every example and will be posting it here. Also, to help give feedback and to test chat gpt I&#x27;m using it to review the code.</p>\n<h2>Chapters</h2>\n<h3>8</h3>\n<ul>\n<li>8.3 <a href=\"https://www.daniel-butler.com/articles/median-and-mode-rust\">Median and Mode</a></li>\n<li>8.3 <a href=\"https://www.daniel-butler.com/articles/ust-ray%E2%80%94y-bay%E2%80%94example-fay\">Pig Latin</a></li>\n<li>8.3 <a href=\"https://daniel-butler.com\">Employee Directory</a></li>\n</ul>\n<p>More to come!</p>",
            "url": "https://daniel-butler.com/articles/rust-examples",
            "title": "Rust Book Examples",
            "summary": "Rust Book example and solutions index. Refactored with ChatGPT 4s help.",
            "date_modified": "2023-03-05T00:00:00.000Z",
            "author": {
                "name": "Spencer Sharp"
            }
        },
        {
            "id": "https://daniel-butler.com/articles/ust-ray—y-bay—example-fay",
            "content_html": "<p>This is a part of the series going through the <a href=\"https://doc.rust-lang.org/stable/book/ch08-03-hash-maps.html#summary\">rust book</a>. I&#x27;m most comfortable with python code, so I&#x27;ve sketched out the program to be written in rust with python first. It helps iron out misunderstandings.</p>\n<h2>Requirements</h2>\n<p>Convert strings to pig latin. The first consonant of each word is moved to the end of the word and “ay” is added, so “first” becomes “irst-fay.” Words that start with a vowel have “hay” added to the end instead (“apple” becomes “apple-hay”). Keep in mind the details about UTF-8 encoding!</p>\n<h2>Python Version</h2>\n<pre class=\"language-python\"><code class=\"language-python\">words <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\noutput_words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> words<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">&quot; &quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">continue</span>\n\t\t\n\tstart <span class=\"token operator\">=</span> <span class=\"token string\">&quot;&quot;</span>\n\tend <span class=\"token operator\">=</span> <span class=\"token string\">&quot;ay&quot;</span>\n\tnew_word <span class=\"token operator\">=</span> <span class=\"token string\">&quot;&quot;</span>\n\t\n\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> letter <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> letter<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span>\n\t\t\t<span class=\"token string\">&#x27;a&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&#x27;e&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&#x27;i&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&#x27;o&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&#x27;u&#x27;</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t\t\tstart <span class=\"token operator\">=</span> <span class=\"token string\">&quot;f&quot;</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> start\n\t\t\tnew_word <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f&quot;</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>word<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token format-spec\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>start<span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>end<span class=\"token punctuation\">}</span></span><span class=\"token string\">&quot;</span></span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t\n\t\tstart <span class=\"token operator\">+=</span> letter\n\t\t\n\toutput_words<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>new_word<span class=\"token punctuation\">)</span>\n\t\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot; &quot;</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>output_words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>English Input\n<code>This is a great example of what it means to speak a foreign language with class.</code></p>\n<p>Translated\n<code>is-Thay is-fay a-fay eat-gray example-fay of-fay at-whay it-fay eans-may o-tay eak-spay a-fay oreign-fay anguage-lay ith-way ass.-clay</code></p>\n<h2>Rust version</h2>\n<p>I did use this <a href=\"https://codereview.stackexchange.com/questions/278267/rust-pig-latin-exercise-solution\">stack overflow</a> to unstick myself.</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span></span>io<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token constant\">VOWELS</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token char\">&#x27;a&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token char\">&#x27;e&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token char\">&#x27;i&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token char\">&#x27;o&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token char\">&#x27;u&#x27;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> input <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token function\">stdin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_line</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;E most String&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> translated_words<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split_whitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> translated_word <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> complete <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> letter <span class=\"token keyword\">in</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> complete <span class=\"token punctuation\">{</span>\n\t\t\t\ttranslated_word<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token constant\">VOWELS</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>letter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> start<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tstart <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;f&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\ttranslated_word<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcomplete <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tstart<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\ttranslated_word <span class=\"token operator\">=</span> <span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;{}-{}ay&quot;</span><span class=\"token punctuation\">,</span> translated_word<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\ttranslated_words<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>translated_word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;{}&quot;</span><span class=\"token punctuation\">,</span> translated_words<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot; &quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>English Input\n<code>This is a great example of what it means to speak a foreign language with class.</code></p>\n<p>Translated\n<code>is-Thay is-fay a-fay eat-gray example-fay of-fay at-whay it-fay eans-may o-tay eak-spay a-fay oreign-fay anguage-lay ith-way ass.-clay</code></p>\n<h2>Challenges</h2>\n<p>Creating the <code>{}-{}ay</code> because of Type mismatch of <code>String</code> and <code>str</code>. The problem seemed to be because I was adding a vector of chars and a string together.</p>\n<pre><code>error[E0308]: mismatched types\n  --&gt; compiler.rs:31:22\n   |\n31 |         translated_word += format!(&quot;-{}ay&quot;, &amp;(*start.as_str()));\n   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&amp;str`, found struct `String`\n   |\n   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n</code></pre>",
            "url": "https://daniel-butler.com/articles/ust-ray—y-bay—example-fay",
            "title": "ust-ray y-bay example-fay",
            "summary": "Python and Rust code helps translate English to Pig Latin! Learn how to speak like a pro with this code, and avoid the pitfalls of type mismatches in Rust.",
            "date_modified": "2023-03-03T00:00:00.000Z",
            "author": {
                "name": "Spencer Sharp"
            }
        }
    ]
}